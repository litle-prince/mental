import React, { useState, useEffect, useRef } from 'react';
import './App.css';

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω —Å —á–∞—Å—Ç–∏—Ü–∞–º–∏
const ParticleBackground = ({ theme }) => {
  return (
    <div className={`particle-background ${theme}`}>
      {[...Array(20)].map((_, i) => (
        <div
          key={i}
          className="particle"
          style={{
            left: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 3}s`,
            animationDuration: `${3 + Math.random() * 4}s`
          }}
        />
      ))}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
const ThemeToggle = ({ theme, toggleTheme }) => {
  return (
    <button
      onClick={toggleTheme}
      className={`theme-toggle ${theme === 'dark' ? 'dark' : 'light'}`}
      title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
    >
      {theme === 'dark' ? '‚òÄÔ∏è' : 'üåô'}
    </button>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∏–∫–∞
const StreakCounter = ({ streak, theme }) => {
  return (
    <div className={`streak-counter ${theme}`}>
      <div className="streak-flame">üî•</div>
      <div className="streak-number">{streak}</div>
      <div className="streak-text">–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
    </div>
  );
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º
const VocabularyCard = ({ word, translation, example, onNext, showAnswer, onShowAnswer, theme, level }) => {
  const [isFlipped, setIsFlipped] = useState(false);
  
  const speakWord = () => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(word);
      utterance.lang = 'en-US';
      utterance.rate = 0.8;
      speechSynthesis.speak(utterance);
    }
  };

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
    if (!showAnswer) onShowAnswer();
  };

  return (
    <div className={`vocabulary-card-container ${theme}`}>
      <div className="level-indicator">
        –£—Ä–æ–≤–µ–Ω—å: {level}
      </div>
      <div className={`vocabulary-card ${isFlipped ? 'flipped' : ''} ${theme}`} onClick={handleFlip}>
        <div className="card-front">
          <h3 className="word-text">{word}</h3>
          <button 
            onClick={(e) => { e.stopPropagation(); speakWord(); }}
            className="pronunciation-btn"
            title="–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ"
          >
            üîä
          </button>
          <div className="card-hint">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</div>
        </div>
        <div className="card-back">
          <p className="translation-text">{translation}</p>
          <p className="example-text">"{example}"</p>
          <button onClick={(e) => { e.stopPropagation(); onNext(); }} className="next-btn">
            –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚Üí
          </button>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç typing —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
const TypingExercise = ({ word, onComplete, theme }) => {
  const [typed, setTyped] = useState('');
  const [startTime, setStartTime] = useState(null);
  const [wpm, setWpm] = useState(0);
  const inputRef = useRef();

  useEffect(() => {
    if (typed.length === 1 && !startTime) {
      setStartTime(Date.now());
    }
    
    if (typed === word && startTime) {
      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö
      const wordsPerMinute = Math.round(1 / timeElapsed);
      setWpm(wordsPerMinute);
      setTimeout(() => onComplete(wordsPerMinute), 1000);
    }
  }, [typed, word, startTime, onComplete]);

  const resetExercise = () => {
    setTyped('');
    setStartTime(null);
    setWpm(0);
    inputRef.current.focus();
  };

  return (
    <div className={`typing-exercise ${theme}`}>
      <h3 className="typing-title">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –ø–µ—á–∞—Ç—å</h3>
      <div className="target-word">{word}</div>
      <div className="typing-area">
        {word.split('').map((char, index) => (
          <span
            key={index}
            className={`char ${
              index < typed.length
                ? typed[index] === char
                  ? 'correct'
                  : 'incorrect'
                : 'pending'
            }`}
          >
            {char}
          </span>
        ))}
      </div>
      <input
        ref={inputRef}
        type="text"
        value={typed}
        onChange={(e) => setTyped(e.target.value)}
        className="typing-input"
        placeholder="–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å..."
        autoFocus
      />
      {typed === word && (
        <div className="typing-result">
          <div className="success-message">–û—Ç–ª–∏—á–Ω–æ! üéâ</div>
          <div className="wpm-display">–°–∫–æ—Ä–æ—Å—Ç—å: {wpm} –°–ü–ú</div>
        </div>
      )}
      <button onClick={resetExercise} className="reset-btn">
        –°–±—Ä–æ—Å–∏—Ç—å
      </button>
    </div>
  );
};

// Drag & Drop —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
const DragDropExercise = ({ sentence, missingWord, options, onComplete, theme }) => {
  const [droppedWord, setDroppedWord] = useState('');
  const [draggedItem, setDraggedItem] = useState(null);

  const handleDragStart = (e, word) => {
    setDraggedItem(word);
    e.dataTransfer.setData('text/plain', word);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const word = e.dataTransfer.getData('text/plain');
    setDroppedWord(word);
    
    if (word === missingWord) {
      setTimeout(() => onComplete(true), 1000);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  return (
    <div className={`drag-drop-exercise ${theme}`}>
      <h3 className="exercise-title">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ</h3>
      <div className="sentence-container">
        {sentence.split('___').map((part, index) => (
          <React.Fragment key={index}>
            <span>{part}</span>
            {index === 0 && (
              <div
                className={`drop-zone ${droppedWord ? 'filled' : ''} ${
                  droppedWord === missingWord ? 'correct' : droppedWord ? 'incorrect' : ''
                }`}
                onDrop={handleDrop}
                onDragOver={handleDragOver}
              >
                {droppedWord || '___'}
              </div>
            )}
          </React.Fragment>
        ))}
      </div>
      <div className="word-options">
        {options.map((word, index) => (
          <div
            key={index}
            className={`draggable-word ${draggedItem === word ? 'dragging' : ''}`}
            draggable
            onDragStart={(e) => handleDragStart(e, word)}
          >
            {word}
          </div>
        ))}
      </div>
      {droppedWord === missingWord && (
        <div className="success-animation">
          <div className="checkmark">‚úì</div>
          <div>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</div>
        </div>
      )}
    </div>
  );
};

// –ú–∏–Ω–∏-–∏–≥—Ä–∞ "–ù–∞–π–¥–∏ –ø–∞—Ä—É"
const MemoryGame = ({ pairs, onComplete, theme }) => {
  const [flipped, setFlipped] = useState([]);
  const [matched, setMatched] = useState([]);
  const [moves, setMoves] = useState(0);

  const cards = [...pairs.map((pair, i) => ({ id: i * 2, content: pair.en, type: 'en' })),
                 ...pairs.map((pair, i) => ({ id: i * 2 + 1, content: pair.ru, type: 'ru' }))];
  
  const shuffledCards = [...cards].sort(() => Math.random() - 0.5);

  const handleCardClick = (cardId) => {
    if (flipped.length === 2 || flipped.includes(cardId) || matched.includes(cardId)) return;

    const newFlipped = [...flipped, cardId];
    setFlipped(newFlipped);

    if (newFlipped.length === 2) {
      setMoves(moves + 1);
      const [first, second] = newFlipped;
      const firstCard = shuffledCards.find(c => c.id === first);
      const secondCard = shuffledCards.find(c => c.id === second);
      
      const firstPairIndex = Math.floor(first / 2);
      const secondPairIndex = Math.floor(second / 2);
      
      if (firstPairIndex === secondPairIndex && firstCard.type !== secondCard.type) {
        setMatched([...matched, first, second]);
        setFlipped([]);
        
        if (matched.length + 2 === shuffledCards.length) {
          setTimeout(() => onComplete(moves + 1), 1000);
        }
      } else {
        setTimeout(() => setFlipped([]), 1000);
      }
    }
  };

  return (
    <div className={`memory-game ${theme}`}>
      <h3 className="game-title">–ù–∞–π–¥–∏ –ø–∞—Ä—ã: –•–æ–¥—ã {moves}</h3>
      <div className="cards-grid">
        {shuffledCards.map((card) => (
          <div
            key={card.id}
            className={`memory-card ${
              flipped.includes(card.id) || matched.includes(card.id) ? 'flipped' : ''
            } ${matched.includes(card.id) ? 'matched' : ''}`}
            onClick={() => handleCardClick(card.id)}
          >
            <div className="card-front">?</div>
            <div className="card-back">{card.content}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
const DetailedStats = ({ stats, theme }) => {
  const maxValue = Math.max(...stats.daily.map(d => d.words + d.grammar));
  
  return (
    <div className={`detailed-stats ${theme}`}>
      <h3 className="stats-title">–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
      
      <div className="stats-grid">
        <div className="stat-card">
          <h4>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div className="stat-item">
            <span>–í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ:</span>
            <span className="stat-value">{stats.totalWords}</span>
          </div>
          <div className="stat-item">
            <span>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span className="stat-value">{stats.totalCorrect}</span>
          </div>
          <div className="stat-item">
            <span>–¢–æ—á–Ω–æ—Å—Ç—å:</span>
            <span className="stat-value">{stats.accuracy}%</span>
          </div>
          <div className="stat-item">
            <span>–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏:</span>
            <span className="stat-value">{stats.avgWPM} –°–ü–ú</span>
          </div>
        </div>

        <div className="chart-container">
          <h4>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é</h4>
          <div className="bar-chart">
            {stats.daily.map((day, index) => (
              <div key={index} className="bar-container">
                <div
                  className="bar"
                  style={{ height: `${((day.words + day.grammar) / maxValue) * 100}%` }}
                >
                  <div className="bar-words" style={{ height: `${(day.words / (day.words + day.grammar)) * 100}%` }}></div>
                </div>
                <div className="bar-label">{day.day}</div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="achievements-showcase">
        <h4>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
        <div className="achievement-grid">
          {stats.achievements.map((achievement, index) => (
            <div key={index} className={`achievement ${achievement.unlocked ? 'unlocked' : 'locked'}`}>
              <div className="achievement-icon">{achievement.icon}</div>
              <div className="achievement-text">
                <div className="achievement-title">{achievement.title}</div>
                <div className="achievement-desc">{achievement.description}</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

function App() {
  const [activeSection, setActiveSection] = useState('home');
  const [theme, setTheme] = useState('light');
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [currentGrammarIndex, setCurrentGrammarIndex] = useState(0);
  const [showGrammarResult, setShowGrammarResult] = useState(false);
  const [userAnswer, setUserAnswer] = useState('');
  const [currentLevel, setCurrentLevel] = useState('beginner');
  const [streak, setStreak] = useState(5);
  const [progress, setProgress] = useState({ 
    words: 0, 
    grammar: 0, 
    typing: 0, 
    games: 0,
    totalWPM: 0,
    attempts: 0
  });

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É—Ä–æ–≤–Ω—è–º–∏
  const vocabularyByLevel = {
    beginner: [
      { word: "Apple", translation: "–Ø–±–ª–æ–∫–æ", example: "I eat an apple every day" },
      { word: "House", translation: "–î–æ–º", example: "This is my house" },
      { word: "Water", translation: "–í–æ–¥–∞", example: "I drink water" },
      { word: "Book", translation: "–ö–Ω–∏–≥–∞", example: "I'm reading a book" }
    ],
    intermediate: [
      { word: "Beautiful", translation: "–ö—Ä–∞—Å–∏–≤—ã–π", example: "The sunset is beautiful" },
      { word: "Important", translation: "–í–∞–∂–Ω—ã–π", example: "This is very important" },
      { word: "Comfortable", translation: "–£–¥–æ–±–Ω—ã–π", example: "This chair is comfortable" },
      { word: "Interesting", translation: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π", example: "The movie was interesting" }
    ],
    advanced: [
      { word: "Magnificent", translation: "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π", example: "The view was magnificent" },
      { word: "Extraordinary", translation: "–ù–µ–æ–±—ã—á–∞–π–Ω—ã–π", example: "She has extraordinary talent" },
      { word: "Sophisticated", translation: "–ò–∑–æ—â—Ä–µ–Ω–Ω—ã–π", example: "A sophisticated approach" },
      { word: "Tremendous", translation: "–û–≥—Ä–æ–º–Ω—ã–π", example: "He made tremendous progress" }
    ]
  };

  const currentVocabulary = vocabularyByLevel[currentLevel];

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä
  const memoryPairs = [
    { en: "Cat", ru: "–ö–æ—Ç" },
    { en: "Dog", ru: "–°–æ–±–∞–∫–∞" },
    { en: "Bird", ru: "–ü—Ç–∏—Ü–∞" },
    { en: "Fish", ru: "–†—ã–±–∞" }
  ];

  const dragDropExercises = [
    {
      sentence: "I ___ to school every day",
      missingWord: "go",
      options: ["go", "goes", "going", "went"]
    },
    {
      sentence: "She ___ a book yesterday",
      missingWord: "read",
      options: ["read", "reads", "reading", "will read"]
    }
  ];

  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const detailedStats = {
    totalWords: progress.words,
    totalCorrect: progress.grammar,
    accuracy: progress.attempts > 0 ? Math.round((progress.grammar / progress.attempts) * 100) : 0,
    avgWPM: progress.attempts > 0 ? Math.round(progress.totalWPM / progress.attempts) : 0,
    daily: [
      { day: '–ü–Ω', words: 5, grammar: 3 },
      { day: '–í—Ç', words: 8, grammar: 5 },
      { day: '–°—Ä', words: 12, grammar: 7 },
      { day: '–ß—Ç', words: 6, grammar: 4 },
      { day: '–ü—Ç', words: 10, grammar: 8 },
      { day: '–°–±', words: 15, grammar: 10 },
      { day: '–í—Å', words: 7, grammar: 5 }
    ],
    achievements: [
      { icon: 'üéØ', title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', description: '–í—ã—É—á–∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ', unlocked: progress.words > 0 },
      { icon: 'üìö', title: '–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å', description: '–í—ã—É—á–∏–ª–∏ 10 —Å–ª–æ–≤', unlocked: progress.words >= 10 },
      { icon: '‚ö°', title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π', description: '–ü–µ—á–∞—Ç—å 30+ –°–ü–ú', unlocked: progress.totalWPM / Math.max(progress.attempts, 1) >= 30 },
      { icon: 'üî•', title: '–°–µ—Ä–∏—è', description: '5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', unlocked: streak >= 5 },
      { icon: 'üèÜ', title: '–ú–∞—Å—Ç–µ—Ä', description: '–ò–∑—É—á–∏–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏', unlocked: currentLevel === 'advanced' && progress.words >= 30 }
    ]
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    const savedTheme = localStorage.getItem('englishAppTheme');
    const savedProgress = localStorage.getItem('englishAppProgress');
    const savedStreak = localStorage.getItem('englishAppStreak');
    
    if (savedTheme) setTheme(savedTheme);
    if (savedProgress) setProgress(JSON.parse(savedProgress));
    if (savedStreak) setStreak(parseInt(savedStreak));
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('englishAppTheme', newTheme);
  };

  const saveProgress = (newProgress) => {
    setProgress(newProgress);
    localStorage.setItem('englishAppProgress', JSON.stringify(newProgress));
  };

  const handleNextWord = () => {
    if (!showAnswer) return;
    
    const newProgress = { ...progress, words: progress.words + 1 };
    saveProgress(newProgress);
    
    setCurrentWordIndex((prev) => (prev + 1) % currentVocabulary.length);
    setShowAnswer(false);
  };

  const handleTypingComplete = (wpm) => {
    const newProgress = { 
      ...progress, 
      typing: progress.typing + 1,
      totalWPM: progress.totalWPM + wpm,
      attempts: progress.attempts + 1
    };
    saveProgress(newProgress);
  };

  const handleGameComplete = (moves) => {
    const newProgress = { ...progress, games: progress.games + 1 };
    saveProgress(newProgress);
  };

  const renderContent = () => {
    switch (activeSection) {
      case 'vocabulary':
        return (
          <div className={`main-content ${theme}`}>
            <div className="section-header">
              <h2 className="section-title">–ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è</h2>
              <div className="level-selector">
                <select 
                  value={currentLevel} 
                  onChange={(e) => setCurrentLevel(e.target.value)}
                  className={`level-select ${theme}`}
                >
                  <option value="beginner">–ù–∞—á–∏–Ω–∞—é—â–∏–π</option>
                  <option value="intermediate">–°—Ä–µ–¥–Ω–∏–π</option>
                  <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
                </select>
              </div>
            </div>
            
            <VocabularyCard
              word={currentVocabulary[currentWordIndex].word}
              translation={currentVocabulary[currentWordIndex].translation}
              example={currentVocabulary[currentWordIndex].example}
              onNext={handleNextWord}
              showAnswer={showAnswer}
              onShowAnswer={() => setShowAnswer(true)}
              theme={theme}
              level={currentLevel}
            />
          </div>
        );

      case 'typing':
        return (
          <div className={`main-content ${theme}`}>
            <h2 className="section-title">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—á–∞—Ç—å</h2>
            <TypingExercise
              word={currentVocabulary[currentWordIndex].word}
              onComplete={handleTypingComplete}
              theme={theme}
            />
          </div>
        );

      case 'games':
        return (
          <div className={`main-content ${theme}`}>
            <h2 className="section-title">–û–±—É—á–∞—é—â–∏–µ –∏–≥—Ä—ã</h2>
            <div className="games-container">
              <div className="game-section">
                <h3>–ù–∞–π–¥–∏ –ø–∞—Ä—ã</h3>
                <MemoryGame
                  pairs={memoryPairs}
                  onComplete={handleGameComplete}
                  theme={theme}
                />
              </div>
              <div className="game-section">
                <h3>–ü–µ—Ä–µ—Ç–∞—â–∏ —Å–ª–æ–≤–æ</h3>
                <DragDropExercise
                  sentence={dragDropExercises[0].sentence}
                  missingWord={dragDropExercises[0].missingWord}
                  options={dragDropExercises[0].options}
                  onComplete={(correct) => correct && handleGameComplete()}
                  theme={theme}
                />
              </div>
            </div>
          </div>
        );

      case 'progress':
        return (
          <div className={`main-content ${theme}`}>
            <h2 className="section-title">–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <DetailedStats stats={detailedStats} theme={theme} />
          </div>
        );

      default:
        return (
          <div className={`main-content ${theme}`}>
            <div className="hero-section">
              <h1 className="hero-title">–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</h1>
              <p className="hero-subtitle">
                –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è
              </p>
              <StreakCounter streak={streak} theme={theme} />
            </div>
            
            <div className="features-grid">
              <div className="feature-card vocabulary" onClick={() => setActiveSection('vocabulary')}>
                <div className="feature-icon">üìö</div>
                <h3>–£–º–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å</h3>
                <p>–ò–∑—É—á–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏</p>
              </div>
              
              <div className="feature-card typing" onClick={() => setActiveSection('typing')}>
                <div className="feature-icon">‚å®Ô∏è</div>
                <h3>–°–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å</h3>
                <p>–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –ø–µ—á–∞—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ</p>
              </div>
              
              <div className="feature-card games" onClick={() => setActiveSection('games')}>
                <div className="feature-icon">üéÆ</div>
                <h3>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã</h3>
                <p>–û–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã</p>
              </div>
              
              <div className="feature-card progress" onClick={() => setActiveSection('progress')}>
                <div className="feature-icon">üìä</div>
                <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Pro</h3>
                <p>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <div className={`app ${theme}`} data-theme={theme}>
      <ParticleBackground theme={theme} />
      
      <nav className={`navbar ${theme}`}>
        <div className="nav-container">
          <div className="nav-brand" onClick={() => setActiveSection('home')}>
            English Learning Pro üöÄ
          </div>
          <div className="nav-menu">
            <button
              onClick={() => setActiveSection('vocabulary')}
              className={`nav-item ${activeSection === 'vocabulary' ? 'active' : ''}`}
            >
              üìö –°–ª–æ–≤–∞—Ä—å
            </button>
            <button
              onClick={() => setActiveSection('typing')}
              className={`nav-item ${activeSection === 'typing' ? 'active' : ''}`}
            >
              ‚å®Ô∏è –ü–µ—á–∞—Ç—å
            </button>
            <button
              onClick={() => setActiveSection('games')}
              className={`nav-item ${activeSection === 'games' ? 'active' : ''}`}
            >
              üéÆ –ò–≥—Ä—ã
            </button>
            <button
              onClick={() => setActiveSection('progress')}
              className={`nav-item ${activeSection === 'progress' ? 'active' : ''}`}
            >
              üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </button>
          </div>
          <ThemeToggle theme={theme} toggleTheme={toggleTheme} />
        </div>
      </nav>

      <main className="main-container">
        {renderContent()}
      </main>
    </div>
  );
}

export default App;